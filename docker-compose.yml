services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring_app1
    ports:
      - "8080:8080" # Actuator 노출용
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb # app_network 내부 통신이라 여기선 5432가 맞음
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - db
    networks:
      - app_network
    labels:
      logging_jobname: app1

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring_app2
    ports:
      - "8081:8080" # Actuator 노출용
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/mydb # app_network 내부 통신이라 여기선 5432가 맞음
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - db
    networks:
      - app_network
    labels:
      logging_jobname: app2

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app1
      - app2
    networks:
      - app_network
    labels:
      logging_jobname: nginx

  db:
    image: postgres:16
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5433:5432"  # 모니터링 서버에서 직접 접근, 로컬 포트 쓰는데가 있어서 5433로 노출
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - app_network
    labels:
      logging_jobname: postgres

  promtail:
    image: grafana/promtail:2.9.5
    container_name: promtail_agent
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app_network

volumes:
  db_data:

networks:
  app_network:
    driver: bridge
